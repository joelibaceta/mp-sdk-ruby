@startuml

package Stripe {
    class Account {
        {static} Stripe::APIOperations::Create <<extend>>
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        {static} Stripe::APIOperations::Delete <<include>>
        ..
        + resource_url()
        + self.retrieve()
        + reject()
        + serialize_params(options)
        + serialize_params_account(obj, update_hash)
        + protected_fields()
        + legal_entity()
        + legal_entity=()
        + deauthorize(client_id, opts)
        - serialize_additional_owners()
    }

    class APIResource {
        {static} Stripe::APIOperations::Request <<include>>
        ..
        + self.class_name()
        + self.resource_url()
        + resource_url()
        + refresh()
        + self.retrieve(id, opts)
    }

    class ApplicationFee {
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        + {static} self.resource_url()
        + refund(params, opts)
    }

    class ApplicationFeeRefund {
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        ..
        + resource_url()
        + {static} self.retrieve(id, api_key)
    }

    class Balance {

    }

    class SingletonAPIResource {

    }

    class BalanceTransaction {
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        + {static} self.resource_url()
    }

    class BankAccount {
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        {static} Stripe::APIOperations::Delete <<include>>
        ..
        + verify(params, opts)
        + resource_url()
        + {static} self.retrieve(id, opts)
    }

    class BitcoinReceiver {
        {static} Stripe::APIOperations::Create <<extend>>
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        {static} Stripe::APIOperations::Delete <<include>>
        ..
        + {static} self.resource_url()
        + resource_url()
    }

    class BitcoinTransaction {
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        + {static} self.resource_url()
    }

    class Card {
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        {static} Stripe::APIOperations::Delete <<include>>
        ..
        resource_url()
        self.retrieve(id, opts)
    }

    class Charge {
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        {static} Stripe::APIOperations::Delete <<include>>
        ..
        + refund(params, opts)
        + capture(params, opts)
        + update_dispute(params, opts)
        + close_dispute(params, opts)
        + mark_as_fraudulent()
        + mark_as_safe()
        - capture_url()
        - dispute_url()
        - close_dispute_url()
        - refund_url()
    }

    class CountrySpec {
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        + {static} self.resource_url()
    }

    class Coupon {
        {static} Stripe::APIOperations::Create <<extend>>
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        {static} Stripe::APIOperations::Delete <<include>>
        ..
    }

    class Customer {
        {static} Stripe::APIOperations::Create <<extend>>
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        {static} Stripe::APIOperations::Delete <<include>>
        ..
        + add_invoice_item(params, opts)
        + invoices(params, opts)
        + invoice_items(params, opts)
        + upcoming_invoice(params, opts)
        + charges(params, opts)
        + create_upcoming_invoice(params, opts)
        + cancel_subscription(params, opts)
        + update_subscription(params, opts)
        + create_subscription(params, opts)
        + delete_discount()
        - discount_url()
        - subscription_url()
        - subscriptions_url()
    }

    class Dispute {
        {static} Stripe::APIOperations::Create <<extend>>
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        ..
        + close(params, opts)
        + close_url()
    }

    class Event {
        {static} Stripe::APIOperations::List  <<extend>>
        ..
    }

    class FileUpload {
        {static} Stripe::APIOperations::Create <<extend>>
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        + {static} self.resource_url()
        + {static} self.request(method, url, params, opts)
        + {static} self.create(params, opts)
    }

    class Invoice {
        {static} Stripe::APIOperations::Create <<extend>>
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        ..
        + {static} self.upcoming(params, opts)
        + pay(opts)
        - {static} self.upcoming_url()
        - pay_url()
    }

    class InvoiceItem {
        {static} Stripe::APIOperations::Create <<extend>>
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        {static} Stripe::APIOperations::Delete <<include>>
        ..
    }

    class ListObject {
        + filters
        + {static} self.empty_list(opts)
        + initialize(*args)
        + auto_paging_each(&blk)
        + empty?()
        + retrieve(id, opts)
        + next_page(params, opts)
        + previous_page(params, opts)
        + resource_url()
    }

    class Order {
        {static} Stripe::APIOperations::Create <<extend>>
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        ..
        + pay(params, opts)
        - pay_url()
    }

    class Plan {
        {static} Stripe::APIOperations::Create <<extend>>
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        {static} Stripe::APIOperations::Delete <<include>>
        ..
    }

    class Product {
        {static} Stripe::APIOperations::Create <<extend>>
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        {static} Stripe::APIOperations::Delete <<include>>
        ..
    }

    class Recipient {
        {static} Stripe::APIOperations::Create <<extend>>
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        {static} Stripe::APIOperations::Delete <<include>>
        ..
    }

    class Refund {
        {static} Stripe::APIOperations::Create <<extend>>
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        ..
    }

    class Reversal {
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        ..
    }

    class Sku {
        {static} Stripe::APIOperations::Create <<extend>>
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        {static} Stripe::APIOperations::Delete <<include>>
        ..
    }

    class StripeObject {
        {static} Gem::Deprecate <<extend>>
        ..
        {static} Enumberable  <<include>>
        ..
        + method_defined?(id)
        + initialize(id, opts)
        + {static} self.construct_from(values, opts)
        + inspect()
        + refresh_from(values, opts, partial)

    }

    class Subscription {
        {static} Stripe::APIOperations::Update  <<include>>
        {static} Stripe::APIOperations::Delete <<include>>
        ..
        + resource_url()
        + {static} self.retrieve(id, opts=nil)
        + delete_discount()
        - discount_url()
    }

    class Token {

    }

    class Transfer {
        {static} Stripe::APIOperations::List  <<extend>>
        ..
        {static} Stripe::APIOperations::Update  <<include>>
        {static} Stripe::APIOperations::Delete <<include>>
        ..
    }

    class Util {
        {static} self.objects_to_ids(h)
        {static} self.object_classes()
        {static} self.convert_to_stripe_object(resp, opts)
        {static} self.file_readable(file)
        {static} self.symbolize_names(object)
        {static} self.encode_parameters(params)
        {static} self.url_encode(key)
        {static} self.flatten_params(params, parent_key)
        {static} self.flatten_params_array(value, calculated_key)
        {static} self.normalize_id(id)
        {static} self.normalize_opts(opts)
        {static} self.check_string_argument!(key)
        {static} self.check_api_key!(key)
    }


    Account <|-- APIResource

    APIResource <|-- StripeObject

    ApplicationFee <|-- APIResource

    ApplicationFeeRefund <|-- APIResource

    Balance <|-- SingletonAPIResource

    BalanceTransaction <|-- APIResource


    BankAccount <|-- APIResource

    BitcoinReceiver <|-- APIResource


    BitcoinTransaction <|-- APIResource

    Card <|-- APIResource

    Charge <|-- APIResource

    CountrySpec <|-- APIResource

    Coupon <|-- APIResource

    Customer <|-- APIResource

    Dispute <|-- APIResource

    Event <|-- APIResource

    FileUpload <|-- APIResource

    Invoice <|-- APIResource

    InvoiceItem <|-- APIResource

    ListObject <|-- StripeObject

    Order <|-- APIResource

    Plan <|-- APIResource

    Product <|-- APIResource

    Recipient <|-- APIResource


    Refund <|-- APIResource

    Reversal <|-- APIResource

    SingletonApiResource <|-- APIResource


    Sku <|-- APIResource

    Subscription <|-- APIResource

    Token <|-- APIResource

    Transfer <|-- APIResource



}



@enduml